// <auto-generated />
using System;
using BackendProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241209092006_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BackendProject.Models.EvaluationAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("longtext")
                        .HasColumnName("Answer");

                    b.Property<int>("AttendeeId")
                        .HasColumnType("int")
                        .HasColumnName("AttendeeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("EvaluationFormId")
                        .HasColumnType("int")
                        .HasColumnName("EvaluationFormId");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("EvaluationFormId");

                    b.HasIndex("QuestionId");

                    b.ToTable("evaluation_answer");
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizerId");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("evaluation_form");
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("Category");

                    b.Property<int>("EvaluationFormId")
                        .HasColumnType("int")
                        .HasColumnName("EvaluationFormId");

                    b.Property<string>("Question")
                        .HasColumnType("longtext")
                        .HasColumnName("Question");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationFormId");

                    b.ToTable("evaluation_question");
                });

            modelBuilder.Entity("BackendProject.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendeesCount")
                        .HasColumnType("int");

                    b.Property<string>("CampusType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventImage")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EventImage");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HostedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("HostedBy");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("Partnerships")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("RequireApproval")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RequirementFiles")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("time(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BackendProject.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("Message");

                    b.Property<string>("NotificationImage")
                        .HasColumnType("longtext")
                        .HasColumnName("NotificationImage");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BackendProject.Models.RForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Event_Id")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<string>("Event_Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Registered_Time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("School_Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("User_Id")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("Event_Id");

                    b.ToTable("registration_form");
                });

            modelBuilder.Entity("BackendProject.Models.UEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Event_Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Event_Id");

                    b.HasIndex("UserId");

                    b.HasIndex("User_Id");

                    b.ToTable("user_events");
                });

            modelBuilder.Entity("BackendProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attended_Events")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Created_Events")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Profile_Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Student_Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attended_Events = 0,
                            Created_At = new DateTime(2024, 12, 9, 17, 20, 4, 977, DateTimeKind.Local).AddTicks(7428),
                            Created_Events = 0,
                            Department = "Administration",
                            Email = "admin@umak.edu.ph",
                            Password = "$2a$11$L9Y/x.3uusLr3.g3TOvFvuAPv8UHrH6I1BUNQfrwDTuFAq/ADHYDK",
                            Profile_Image = "",
                            Role = "Admin",
                            Section = "AdminSection",
                            Status = "Approved",
                            Student_Number = "ADMIN001",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationAnswer", b =>
                {
                    b.HasOne("BackendProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.EvaluationForm", "EvaluationForm")
                        .WithMany("EvaluationAnswers")
                        .HasForeignKey("EvaluationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.EvaluationQuestion", "EvaluationQuestion")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationForm");

                    b.Navigation("EvaluationQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationForm", b =>
                {
                    b.HasOne("BackendProject.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationQuestion", b =>
                {
                    b.HasOne("BackendProject.Models.EvaluationForm", "EvaluationForm")
                        .WithMany("EvaluationQuestions")
                        .HasForeignKey("EvaluationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationForm");
                });

            modelBuilder.Entity("BackendProject.Models.Notification", b =>
                {
                    b.HasOne("BackendProject.Models.Event", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.RForm", b =>
                {
                    b.HasOne("BackendProject.Models.Event", "Event")
                        .WithMany("RForms")
                        .HasForeignKey("Event_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BackendProject.Models.UEvent", b =>
                {
                    b.HasOne("BackendProject.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("Event_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendProject.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId");

                    b.HasOne("BackendProject.Models.RForm", "RForm")
                        .WithMany("UEvents")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("RForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendProject.Models.EvaluationForm", b =>
                {
                    b.Navigation("EvaluationAnswers");

                    b.Navigation("EvaluationQuestions");
                });

            modelBuilder.Entity("BackendProject.Models.Event", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RForms");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("BackendProject.Models.RForm", b =>
                {
                    b.Navigation("UEvents");
                });

            modelBuilder.Entity("BackendProject.Models.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
